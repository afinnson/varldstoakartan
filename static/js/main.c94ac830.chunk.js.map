{"version":3,"sources":["Pins.jsx","mapContainer.jsx","App.js","state.js","readCsv.js","reportWebVitals.js","index.js"],"names":["Pins","pinData","useState","selected","setSelected","localPinData","setLocalPinData","map","useGoogleMap","useEffect","onSelect","item","currZoom","getZoom","setZoom","Math","min","panTo","lat","Number","lng","img_href","position","onClick","name","clickable","onCloseClick","options","pixelOffset","height","width","src","alt","style","maxHeight","maxWidth","CreateMap","defaultCenter","googleMapsApiKey","mapContainerStyle","zoom","center","App","state","setPinData","State","defaultPin","showInfo","data","tabletop","prop","pin","outPinArr","i","length","push","Tabletop","init","key","callback","simpleSheet","ReadCsv","className","backgroundColor","color","textAlign","alignContent","paddingTop","fontSize","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c94ac830.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Marker, InfoWindow, useGoogleMap } from '@react-google-maps/api';\r\n\r\nexport default function Pins(pinData) {\r\n  const [ selected, setSelected ] = useState({});\r\n  const [ localPinData, setLocalPinData ] = useState([]);\r\n  const maxZoom = 15;\r\n\r\n  const map = useGoogleMap();\r\n\r\n  useEffect(() => {\r\n    setLocalPinData(pinData.pinData);\r\n  }, [pinData])\r\n\r\n  const onSelect = item => {\r\n    setSelected(item);\r\n    const currZoom = map.getZoom();\r\n    if (currZoom < maxZoom) {\r\n      map.setZoom(Math.min(currZoom + 3, maxZoom));\r\n    }\r\n    map.panTo({ lat: Number(item.lat), lng: Number(item.lng) })\r\n  }\r\n\r\n  return (\r\n  <>\r\n  {localPinData.pinData?.map(item => {\r\n    if (item.lat !== \"0\") {\r\n      if (item.img_href !== \"0\") {\r\n        return (\r\n        <Marker\r\n          key={item.name + \"_\" + item.lat + \",\" + item.lng + item.img_href}\r\n          position={{ lat: Number(item.lat), lng: Number(item.lng) }}\r\n          onClick={() => {\r\n            onSelect(item)\r\n          }}\r\n        />\r\n        )\r\n      } else {\r\n        return (\r\n          <Marker\r\n            key={item.name + \"_\" + item.lat + \",\" + item.lng}\r\n            position={{ lat: Number(item.lat), lng: Number(item.lng) }}\r\n            clickable={true}\r\n            onClick={() => {\r\n              onSelect(item)\r\n            }}\r\n          />\r\n          )\r\n      }\r\n    } else return undefined;\r\n    })\r\n }\r\n {selected.lat &&\r\n   <InfoWindow\r\n    position={{ lat: Number(selected.lat), lng: Number(selected.lng) }}\r\n    clickable={true}\r\n    onCloseClick={() => setSelected({})}\r\n    options={{ pixelOffset: { height: -35, width: 0 } }}\r\n  >\r\n    {selected.img_href !== \"0\" ?\r\n      <img\r\n      src={selected.img_href}\r\n      alt=\"\"\r\n      style={{ maxHeight: \"200px\", maxWidth: \"200px\"}}\r\n    /> :\r\n    <div>\r\n      No image available\r\n    </div>\r\n    }\r\n  </InfoWindow>}\r\n </>);\r\n}","import React, { useState } from 'react';\r\nimport { GoogleMap, LoadScript } from '@react-google-maps/api';\r\nimport Pins from \"./Pins\";\r\n\r\nconst CreateMap = (pinData) => {\r\n  const startZoom = 3;\r\n\r\n  const mapStyles = {        \r\n    height: \"88vh\",\r\n    width: \"100%\"};\r\n  \r\n  const [defaultCenter, setDefaultCenter] = useState({\r\n    lat: 0, lng: 90\r\n  });\r\n  \r\n  return (\r\n     <LoadScript\r\n       googleMapsApiKey='thisIsNotTheKey'>\r\n        <GoogleMap\r\n          mapContainerStyle={mapStyles}\r\n          zoom={startZoom}\r\n          center={defaultCenter}\r\n        >\r\n          <Pins\r\n            pinData={pinData}\r\n          />\r\n        </GoogleMap>\r\n     </LoadScript>\r\n  )\r\n}\r\n\r\nexport default CreateMap;\r\n","import './App.css';\r\nimport CreateMap from './mapContainer';\r\nimport State from './state';\r\nimport ReadCsv from \"./readCsv\";\r\n\r\nfunction App() {\r\n  let state = State();\r\n\r\n  state.pinData = ReadCsv();\r\n\r\n  return (\r\n    <>\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <p>\r\n          Världstoakartan – Toaletter utan gränser\r\n        </p>\r\n      </header>\r\n    </div>\r\n    {state.pinData.length ? \r\n    <CreateMap\r\n      pinData={state.pinData}\r\n    /> :\r\n    <div\r\n      style={{\r\n        backgroundColor: \"#282c34\",\r\n        color: \"white\", \r\n        height: \"100vh\",\r\n        width: \"100%\",\r\n        textAlign: \"center\",\r\n        alignContent: \"center\",\r\n        paddingTop: \"10%\",\r\n        fontSize: \"20px\"\r\n      }}\r\n    >\r\n      Loading...\r\n    </div>\r\n    }\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function State() {\r\n  const [pinData, setPinData] = useState([]);\r\n\r\n  return { pinData: pinData, setPinData: setPinData };\r\n}","import { useEffect, useState } from \"react\";\r\nimport Tabletop from \"tabletop\";\r\n\r\nexport default function ReadCsv() {\r\n  const defaultPin = {\r\n    lat: 0,\r\n    lng: 0,\r\n    img_href: \"\",\r\n    name: \"\"\r\n  }\r\n  const [pinData, setPinData] = useState([]);\r\n\r\n  const url = \"https://docs.google.com/spreadsheets/d/1T1AFJ1kQPjp2BAxSrQyyr78ZogArOz6Q3IgqhNF4drI/edit?usp=sharing\";\r\n\r\n  useEffect(() => {\r\n    Tabletop.init({\r\n      key: url,\r\n      callback: showInfo,\r\n      simpleSheet: true\r\n    })\r\n      // .then(data => setData(data))\r\n      // .catch(err => console.warn(err));\r\n  }, []);\r\n\r\n  function showInfo(data, tabletop) {\r\n    let outPinArr = [];\r\n    let i = 0;\r\n    let prop;\r\n    let pin;\r\n    for (i = 0; i < data.length ; i++ ) {\r\n      pin = defaultPin;\r\n      for (prop in data[i]) {\r\n        pin[prop] = data[i][prop];\r\n      }\r\n      outPinArr.push({ ...pin });\r\n    }\r\n    setPinData(outPinArr);\r\n  }\r\n\r\n  return (\r\n    pinData\r\n  );\r\n}","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}